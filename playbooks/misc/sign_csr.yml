---
# This testing playbook takes the openshift-ansible generated CSRs and issues
# certs for them all, resulting in a certificate tarball ready for the
# update-csrs.yml playbook.
- name: Issue certificates for testing
  hosts: localhost
  connection: local
  tasks:
    - set_fact:
        # Point to the csr.tgz generated by playbooks/generate-csrs.yml
        csr_tar: "csr.tgz"
        # The resulting tar file: set openshift_csr_issued_certificates to this and run playbooks/update-csrs.yml
        cert_result_tar: "certs.tgz"
        csr_dir: "csrs"
        # Set these to the hosts defined in your ansible hosts file that generated the csrs.
        etcd_hosts: "{{ groups.etcd }}"
        master_hosts: "{{ groups.masters }}"
        node_hosts: "{{ groups.nodes }}"
    - file:
        path: "{{ csr_dir }}"
        state: directory
    - command: "tar xvf {{ csr_tar }} -C {{ csr_dir }} ."
    - stat:
        path: "./index.txt"
      register: index_stat
    - command: "touch index.txt"
      when: not index_stat.stat.exists
    - stat:
        path: "./serial"
      register: serial_stat
    - copy:
        dest: "./serial"
        content: |
          01
      when: not serial_stat.stat.exists
    - stat:
        path: "openssl.cnf"
      register: conf_stat
    - copy:
        dest: "./openssl.cnf"
        content: |
          [ ca ]
          default_ca  = CA_default
          [ CA_default ]
          certs   = .
          database  = ./index.txt
          unique_subject  = no
          new_certs_dir = .
          certificate = ./ca.crt
          serial    = ./serial
          private_key = ./ca.key
          copy_extensions = copy
          default_days  = 365
          default_md  = sha256
          preserve = no
          policy    = policy_anything
          x509_extensions = usr_cert
          [ policy_anything ]
          countryName   = optional
          stateOrProvinceName = optional
          localityName    = optional
          organizationName  = optional
          organizationalUnitName  = optional
          commonName    = supplied
          emailAddress    = optional
          [ usr_cert ]
          subjectKeyIdentifier=hash
          authorityKeyIdentifier=keyid,issuer
      when: not conf_stat.stat.exists
    - command: >
          openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -subj "/CN=testCA" -keyout ca.key -out ca.crt
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/etcd-{{ item }}/server.crt -infiles {{ csr_dir }}/etcd-{{ item }}/server.csr"
      with_items: "{{ etcd_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/etcd-{{ item }}/peer.crt -infiles {{ csr_dir }}/etcd-{{ item }}/peer.csr"
      with_items: "{{ etcd_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/node-{{ item }}/server.crt -infiles {{ csr_dir }}/node-{{ item }}/server.csr"
      with_items: "{{ node_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/node-{{ item }}/system:node:{{ hostvars[item].openshift_hostname }}.crt -infiles {{ csr_dir }}/node-{{ item }}/system:node:{{ hostvars[item].openshift_hostname }}.csr"
      with_items: "{{ node_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/admin.crt -infiles {{ csr_dir }}/master-{{ item }}/admin.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/openshift-master.crt -infiles {{ csr_dir }}/master-{{ item }}/openshift-master.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/master.server.crt -infiles {{ csr_dir }}/master-{{ item }}/master.server.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/master.etcd-client.crt -infiles {{ csr_dir }}/master-{{ item }}/master.etcd-client.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/master.kubelet-client.crt -infiles {{ csr_dir }}/master-{{ item }}/master.kubelet-client.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/master.proxy-client.crt -infiles {{ csr_dir }}/master-{{ item }}/master.proxy-client.csr"
      with_items: "{{ master_hosts }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/aggregator-front-proxy.crt -infiles {{ csr_dir }}/master-{{ item }}/aggregator-front-proxy.csr"
      with_items: "{{ master_hosts.0 }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/openshift-aggregator.crt -infiles {{ csr_dir }}/master-{{ item }}/openshift-aggregator.csr"
      with_items: "{{ master_hosts.0 }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/etcd.server.crt -infiles {{ csr_dir }}/master-{{ item }}/etcd.server.csr"
      with_items: "{{ master_hosts.0 }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/registry.crt -infiles {{ csr_dir }}/master-{{ item }}/registry.csr"
      with_items: "{{ master_hosts.0 }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/openshift-router.crt -infiles {{ csr_dir }}/master-{{ item }}/openshift-router.csr"
      with_items: "{{ master_hosts.0 }}"
    - command: "openssl ca -batch -notext -create_serial -config openssl.cnf -out {{ csr_dir }}/master-{{ item }}/service-catalog.crt -infiles {{ csr_dir }}/master-{{ item }}/service-catalog.csr"
      with_items: "{{ master_hosts.0 }}"
    - file:
        path: "{{ csr_dir }}/ca"
        state: directory
    - file:
        path: "{{ csr_dir }}/etcd-ca"
        state: directory
    - file:
        path: "{{ csr_dir }}/node-ca"
        state: directory
    - file:
        path: "{{ csr_dir }}/service-catalog"
        state: directory
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/service-catalog/ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/ca/ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/ca/front-proxy-ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/ca/frontproxy-ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/ca/master.etcd-ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/etcd-ca/ca.crt"
    - copy:
        src: "./ca.crt"
        dest: "{{ csr_dir }}/node-ca/client-ca.crt"
    - command: "tar cjvf ./{{ cert_result_tar }} -C {{ csr_dir }} ."
